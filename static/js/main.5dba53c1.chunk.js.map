{"version":3,"sources":["components/Header.js","components/BMICalculator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","BMICalculator","useState","weight","updateWeightValue","height","updateHeightValue","bmiValue","updateBMIValue","displayWeight","type","value","onChange","e","target","onClick","console","log","heightInMeters","roundedBMIValue","toFixed","calculateBMI","displayBMIValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAO,SAASA,IACd,OACE,qBAAKC,UAAU,wDAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,iCACE,oBAAIA,UAAU,+BAAd,kC,iBCFH,SAASC,IAAiB,IAAD,EACMC,mBAAS,IADf,mBACvBC,EADuB,KACfC,EADe,OAEMF,mBAAS,IAFf,mBAEvBG,EAFuB,KAEfC,EAFe,OAGKJ,mBAAS,MAHd,mBAGvBK,EAHuB,KAGbC,EAHa,KAsB9B,SAASC,IACP,GAAiB,OAAbF,EAAmB,CACrB,GAAe,KAAXJ,GAAiBA,EAAS,GAC5B,OACE,gCACE,4EACA,kEAGC,GAAIA,EAAS,GAClB,OACE,gCACE,4EACA,iEAGC,GAAIA,EAAS,IAAMA,EAAS,GACjC,OACE,gCACE,6EACA,sEAMV,OACE,sBAAKH,UAAU,8CAAf,UACE,uBAAOA,UAAU,YAAjB,4BACA,iCACE,uBACEU,KAAK,OACLV,UAAU,OACVW,MAAOR,EACPS,SA7CR,SAAiCC,GAC/BT,EAAkBS,EAAEC,OAAOH,YA+CzB,uBAAOX,UAAU,YAAjB,4BACA,iCACE,uBACEU,KAAK,OACLV,UAAU,OACVW,MAAON,EACPO,SAnDR,SAAiCC,GAC/BP,EAAkBO,EAAEC,OAAOH,YAqDzB,iCACE,wBACED,KAAK,SACLV,UAAU,iCACVe,QAAS,YApEjB,WACEC,QAAQC,IAAI,iBAAkBd,EAAQE,GACtC,IAAMa,EAAiBb,EAAS,IAE1Bc,GADWhB,GAAUe,EAAiBA,IACXE,QAAQ,GACzCZ,EAAeW,GAgEPE,GACAZ,KALJ,sBAWF,8BA/DJ,WACE,GAAiB,OAAbF,EACF,OAAO,qDAAwBA,KA6DzBe,KACN,8BAAMb,SCvEGc,MATf,WACE,OACE,sBAAKvB,UAAU,MAAf,UACE,cAACD,EAAD,IACA,cAAC,EAAD,QCISyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5dba53c1.chunk.js","sourcesContent":["export function Header() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary d-flex\">\r\n      <div className=\" text-center px-auto w-100\">\r\n        <center>\r\n          <h4 className=\"text-light position-relative\">BMI Calculator</h4>\r\n        </center>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport \"./BMICalculator.css\";\r\n\r\nexport function BMICalculator() {\r\n  const [weight, updateWeightValue] = useState(\"\");\r\n  const [height, updateHeightValue] = useState(\"\");\r\n  const [bmiValue, updateBMIValue] = useState(null);\r\n  function calculateBMI() {\r\n    console.log(\"button clicked\", weight, height);\r\n    const heightInMeters = height / 100;\r\n    const bmiValue = weight / (heightInMeters * heightInMeters);\r\n    const roundedBMIValue = bmiValue.toFixed(2);\r\n    updateBMIValue(roundedBMIValue);\r\n  }\r\n  function handleWeightInputChange(e) {\r\n    updateWeightValue(e.target.value);\r\n  }\r\n  function handleHeightInputChange(e) {\r\n    updateHeightValue(e.target.value);\r\n  }\r\n  function displayBMIValue() {\r\n    if (bmiValue !== null) {\r\n      return <div>Your BMI value is {bmiValue}</div>;\r\n    }\r\n  }\r\n  function displayWeight() {\r\n    if (bmiValue !== null) {\r\n      if (weight !== \"\" && weight < 50) {\r\n        return (\r\n          <div>\r\n            <p>Your suggested weight range is less than 50</p>\r\n            <p>You are in a underweight range</p>\r\n          </div>\r\n        );\r\n      } else if (weight > 67) {\r\n        return (\r\n          <div>\r\n            <p>Your suggested weight range is more than 67</p>\r\n            <p>You are in a overweight range</p>\r\n          </div>\r\n        );\r\n      } else if (weight > 50 && weight < 67) {\r\n        return (\r\n          <div>\r\n            <p>Your suggested weight range is between 50-67</p>\r\n            <p>You are in a healthy weight range</p>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container d-flex flex-column form-container\">\r\n      <label className=\"me-4 mt-4\">Weight in kgs:</label>\r\n      <center>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-40\"\r\n          value={weight}\r\n          onChange={handleWeightInputChange}\r\n        ></input>\r\n      </center>\r\n      <label className=\"me-4 mt-4\">Height in cms:</label>\r\n      <center>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-40\"\r\n          value={height}\r\n          onChange={handleHeightInputChange}\r\n        ></input>\r\n      </center>\r\n      <center>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mt-4 mb-4 w-45\"\r\n          onClick={() => {\r\n            calculateBMI();\r\n            displayWeight();\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </center>\r\n      <div>{displayBMIValue()}</div>\r\n      <div>{displayWeight()}</div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { Header } from \"./components/Header\";\nimport { BMICalculator } from \"./components/BMICalculator\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <BMICalculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}